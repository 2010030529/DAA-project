
class Node:
   def __init__(self, data):
      self.left = None
      self.right = None
      self.data = data
# Insert Node
   def insert(self, data):

      if self.data:
         if data < self.data:
            if self.left is None:
               self.left = Node(data)

            else:
               self.left.insert(data)
         elif data > self.data:
            if self.right is None:
               self.right = Node(data)
            else:
               self.right.insert(data)
      else:
         self.data = data
# Print the Tree
   def PrintTree(self):
      if self.left:
         self.left.PrintTree()
      print( self.data),
      if self.right:
         self.right.PrintTree()
# Inorder traversal
# Left -> Root -> Right
   def inorderTraversal(self, root):
      res = []
      if root:
         res = self.inorderTraversal(root.left)
         res = res+self.inorderTraversal(root.right)
         res.append(root.data)
      return res
root = Node(27)
root.insert(14)
root.insert(35)
root.insert(10)
root.insert(19)
root.insert(33)
root.insert(42)
values = []
for i in range(len(root.inorderTraversal(root))) :
   values.append(root.inorderTraversal(root)[i])
length=len(values)
hhh=[]
for i in values:
   print(i)
   if i!=values[length-1]:
     valuessss=input("enter")
   hhh.append(valuessss)
hhh[length-1]=0
print(hhh)
print(root.inorderTraversal(root))
sumofterms=0
given=12
for i in range(len(hhh)):
   if sumofterms<given:
      print(sumofterms)
      sumofterms = sumofterms +int(hhh[i])

   else:
       # print(sumofterms-int(hhh[i]))
       sumofterms=0
